// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppRole {
  ADMIN
  FACILITATOR
}

model AppRoleOnUser {
  user_id BigInt
  role    AppRole

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@id([user_id, role])
}

model User {
  id   BigInt @id @default(autoincrement())

  completed_onboarding Boolean @default(false)
  email                String
  first_name           String
  last_name            String
  real_name            String
  profile_image        String
  slack_id             String @unique
  slack_team_id        String
  timezone             String
  username             String  @unique // default `${slugify(user.real_name.toLowerCase())}-${cuid.slug()}`

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  app_roles           AppRoleOnUser[]
  checkins            MeetingCheckin[]
  created_meetings    Meeting[]
  created_projects    Project[]
  meeting_assignments MeetingParticipant[]
  members_added       TeamMember[]         @relation("AddMember")
  participants_added  MeetingParticipant[] @relation("AddParticipant")
  team_assignments    TeamMember[]

  @@unique([slack_id, slack_team_id])
  @@index([slack_id, slack_team_id])
  @@index(slack_id)
  @@index(username)
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  INDETERMINATE
}

model Project {
  id   BigInt @id @default(autoincrement())

  created_by_id   BigInt
  created_by_user User          @relation(fields: [created_by_id], references: [id])
  meetings        Meeting[]
  name            String
  slug            String?       @unique
  status          ProjectStatus @default(ACTIVE)
  team_members    TeamMember[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

enum ProjectRole {
  OWNER
  MEMBER
  GUEST
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  INDETERMINATE
}

model TeamMember {
  user_id    BigInt
  project_id BigInt

  added_by_id BigInt
  status      MemberStatus @default(ACTIVE)
  role        ProjectRole  @default(MEMBER)
  position    String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  added_by_user User    @relation(name: "AddMember", fields: [added_by_id], references: [id])
  member        User    @relation(fields: [user_id], references: [id])
  project       Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@id([user_id, project_id])
  @@index(user_id)
  @@index(project_id)
}

enum MeetingStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED
}

model Meeting {
  id   BigInt @id @default(autoincrement())

  title            String
  description      String
  start_time       DateTime
  end_time         DateTime
  gcal_event_id    String        @unique
  rrule            String?
  project_id       BigInt
  created_by_id    BigInt
  slack_channel_id String
  status           MeetingStatus @default(CONFIRMED)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  checkins        MeetingCheckin[]
  created_by_user User                 @relation(fields: [created_by_id], references: [id])
  exceptions      MeetingException[]
  participants    MeetingParticipant[]
  project         Project              @relation(fields: [project_id], references: [id])
}

model MeetingException {
  meeting_id BigInt
  instance   DateTime

  start_time    DateTime?
  end_time      DateTime?
  gcal_event_id String        @unique
  description   String?
  title         String?
  status        MeetingStatus

  recurring_event Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@id([meeting_id, instance])
  @@index(meeting_id)
  @@index(instance)
}

model MeetingParticipant {
  meeting_id   BigInt
  user_id      BigInt
  meeting_time DateTime // use new Date(0) to represent the default for a given meeting/user combination

  added_by_id BigInt
  is_active   Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  added_by_user User    @relation(name: "AddParticipant", fields: [added_by_id], references: [id])
  meeting       Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  participant   User    @relation(fields: [user_id], references: [id])

  @@id([meeting_id, user_id, meeting_time])
  @@index(user_id)
  @@index(meeting_id)
}

model MeetingCheckin {
  meeting_id   BigInt
  user_id      BigInt
  meeting_time DateTime

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id])

  @@id([meeting_id, user_id, meeting_time])
  @@index(meeting_id)
  @@index(user_id)
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator erd {
  provider = "prisma-erd-generator"
}

enum AppRole {
  APP_ADMIN
  FACILITATOR
  WORKSPACE_ADMIN
}

model AppRoleOnUser {
  user_id BigInt
  role    AppRole

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@id([user_id, role])
}

enum Visibility {
  PUBLIC
  PRIVATE
  WORKSPACE
}

model User {
  id BigInt @id @default(autoincrement())

  completed_onboarding Boolean    @default(false)
  email                String
  first_name           String
  last_name            String
  real_name            String
  profile_image        String
  slack_id             String     @unique
  slack_team_id        String
  timezone             String
  username             String     @unique
  visibility           Visibility @default(PUBLIC)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  app_roles          AppRoleOnUser[]
  checkins           EventCheckin[]
  created_events     Event[]
  created_projects   Project[]
  event_assignments  EventParticipant[]
  members_added      TeamMember[]       @relation("AddMember")
  participants_added EventParticipant[] @relation("AddParticipant")
  team_assignments   TeamMember[]

  @@unique([slack_id, slack_team_id])
  @@index([slack_id, slack_team_id])
  @@index(slack_id)
  @@index(username)
}

model Project {
  id BigInt @id @default(autoincrement())

  created_by_id    BigInt
  created_by_user  User       @relation(fields: [created_by_id], references: [id])
  gcal_calendar_id String
  name             String
  slack_team_id    String
  slug             String     @unique
  is_active        Boolean    @default(true)
  visibility       Visibility @default(PUBLIC)

  events       Event[]
  team_members TeamMember[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@index(slug)
}

enum ProjectRole {
  OWNER
  MEMBER
  GUEST
}

model TeamMember {
  user_id    BigInt
  project_id BigInt

  added_by_id BigInt
  is_active   Boolean     @default(true)
  role        ProjectRole @default(MEMBER)
  position    String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  added_by_user User    @relation(name: "AddMember", fields: [added_by_id], references: [id])
  member        User    @relation(fields: [user_id], references: [id])
  project       Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@id([user_id, project_id])
  @@index(user_id)
  @@index(project_id)
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED
}

enum EventType {
  MEETING
}

model Event {
  id BigInt @id @default(autoincrement())

  all_day          Boolean     @default(false)
  title            String
  description      String
  start_time       DateTime
  end_time         DateTime
  gcal_event_id    String      @unique
  recurrence       Json?
  project_id       BigInt
  created_by_id    BigInt
  slack_channel_id String
  slack_team_id    String
  slug             String      @unique
  status           EventStatus @default(CONFIRMED)
  timezone         String
  type             EventType   @default(MEETING)
  visibility       Visibility  @default(PUBLIC)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  checkins        EventCheckin[]
  created_by_user User               @relation(fields: [created_by_id], references: [id])
  exceptions      EventException[]
  participants    EventParticipant[]
  project         Project            @relation(fields: [project_id], references: [id])

  @@index(gcal_event_id)
  @@index(slug)
}

model EventException {
  event_id            BigInt
  original_start_time DateTime

  all_day       Boolean?
  start_time    DateTime?
  end_time      DateTime?
  gcal_event_id String      @unique
  description   String?
  title         String?
  status        EventStatus

  recurring_event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@id([event_id, original_start_time])
  @@index(event_id)
  @@index(original_start_time)
  @@index(gcal_event_id)
}

model EventParticipant {
  event_id   BigInt
  user_id    BigInt
  event_time DateTime // use new Date(0) to represent the default for a given event/user combination

  added_by_id BigInt
  is_active   Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  added_by_user User  @relation(name: "AddParticipant", fields: [added_by_id], references: [id])
  event         Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  participant   User  @relation(fields: [user_id], references: [id])

  @@id([event_id, user_id, event_time])
  @@index(user_id)
  @@index(event_id)
}

model EventCheckin {
  event_id   BigInt
  user_id    BigInt
  event_time DateTime

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id])

  @@id([event_id, user_id, event_time])
  @@index(event_id)
  @@index(user_id)
}

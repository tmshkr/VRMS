import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import type { AppState, AppThunk } from "./index";
import axios from "axios";

export interface UserState {
  value: any | null;
  status: "idle" | "pending" | "succeeded" | "failed";
}

const initialState: UserState = {
  value: null,
  status: "idle",
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value = action.payload;
    },
    clearUser: (state) => {
      state.value = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUser.pending, (state) => {
        state.status = "pending";
      })
      .addCase(fetchUser.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.value = action.payload;
      })
      .addCase(fetchUser.rejected, (state) => {
        state.status = "failed";
        state.value = null;
      });
  },
});

export const { setUser, clearUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: AppState) => state.user.value;

export default userSlice.reducer;

export const fetchUser = createAsyncThunk(
  "user/fetchUserStatus",
  async (session: any) => {
    return axios
      .get("/api/me")
      .then(({ data }) => {
        const { user } = data;
        return { ...session, ...user };
      })
      .catch((err) => {
        if (err.response.status === 404) {
          return { ...session, unconnectedAccount: true };
        } else throw new Error("There was a problem getting the user");
      });
  }
);
